<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Evm on TenderMint</title>
    <link>http://tendermint.com/categories/evm/</link>
    <description>Recent content in Evm on TenderMint</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 13 Sep 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://tendermint.com/categories/evm/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Cases for Tendermint</title>
      <link>http://tendermint.com/posts/cases-for-tendermint/</link>
      <pubDate>Sun, 13 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tendermint.com/posts/cases-for-tendermint/</guid>
      <description>

&lt;p&gt;&lt;br/&gt;
I got a great piece of feedback yesterday.  I was explaining to someone whether a blockchain application should be built on the
EVM or as a native transaction type in Tendermint.  After doing so, the feedback that I got was &amp;ldquo;You should be blogging about this stuff, Tendermint doesnâ€™t have enough marketing / explanation of how it fits into the ecosystem.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re going to fix that starting today.&lt;/p&gt;

&lt;p&gt;You may have an application that benefits from blockchain technology, and you may be trying to figure out whether to build that on Bitcoin, some meta-coin protocol like Counterparty, with Solidity/Serpent on the Ethereum virtual machine, or on a new blockchain stack altogether.  This blog post will attempt to demonstrate why you should seriously consider building on Tendermint.&lt;/p&gt;

&lt;h2 id=&#34;a-little-background-on-tendermint:1825e1740a61156b2d6c2c2a5daacec7&#34;&gt;A little background on Tendermint&lt;/h2&gt;

&lt;p&gt;Tendermint is not a fork of Bitcoin, NXT, Ripple, or Ethereum.  Tendermint is its own blockchain stack written from the ground up in a very opinionated fashion.  It started back in 2014 as an ambitious project to solve the Bitcoin mining problem and bring real Byzantine fault tolerant consensus to cryptocurrencies.  First we adapted an existing BGA consensus algorithm to make it suitable for blockchains.  Next for the actual implementation we considered forking Bitcoin, NXT, BitShares, and other projects, but none could easily accomodate the desired project architecture.  So, a brand spanking new blockchain stack was born.&lt;/p&gt;

&lt;p&gt;Tendermint offers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Byzantine fault tolerant consensus with unparalleled speed and security guarantees &amp;ndash; without mining.&lt;/li&gt;
&lt;li&gt;A very clean codebase with clear separation of concerns &amp;ndash; no spaghetti, thanks Golang!&lt;/li&gt;
&lt;li&gt;Throttled/fair P2P stack to handle multiplexed channels of communication.&lt;/li&gt;
&lt;li&gt;Clear p2p logic with the reactor pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On top of this framework, we&amp;rsquo;ve built more advanced blockchain features.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A compatible and efficient Ethereum VM implementation&lt;/li&gt;
&lt;li&gt;A permissions system that works across accounts and VM contracts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;rsquo;re going to build more exciting features going forward, except this time we&amp;rsquo;ll blog about it while we do it, so hang on to your metaphorical horses, this will get interesting.  By the way, if you go to &lt;a href=&#34;http://tendermint.com&#34;&gt;http://tendermint.com&lt;/a&gt; and sign up for the newsletter, we&amp;rsquo;ll
send you an email with every published blog post.&lt;/p&gt;

&lt;h2 id=&#34;on-tendermint-consensus:1825e1740a61156b2d6c2c2a5daacec7&#34;&gt;On Tendermint consensus&lt;/h2&gt;

&lt;p&gt;The consensus system is the foundational layer of any blockchain stack. It is the process by which all of the transaction validators (aka miners) agree on the state of the network.  Improvements in speed, security, and cost of a consensus system ripple up and improve performance of any networks &amp;amp; applications built on top of it.  Lets dive into some examples to get a sense of how it works.&lt;/p&gt;

&lt;h3 id=&#34;case-1-payment-verification:1825e1740a61156b2d6c2c2a5daacec7&#34;&gt;Case 1: Payment verification&lt;/h3&gt;

&lt;p&gt;Say that you&amp;rsquo;re in a room and your mobile phone is connected to untrusted wifi, and you&amp;rsquo;re making a business deal with Satoshi.  Satoshi just sent you a large payment, and you need to verify that this payment was committed onto the blockchain network irreversibly.&lt;/p&gt;

&lt;p&gt;With Bitcoin, you generally need to wait up to 6 confirmation blocks (about 1 hour, sometimes longer) to consider a transaction fully committed.  For very large payment transactions you should wait even longer, because the security afforded by the blockchain miners is no greater than the cost of double-spending that transaction, which is today only about 25 Bitcoins per reverted block, and soon to be half of that.&lt;/p&gt;

&lt;p&gt;With Tendermint, a global network of 1000 independent validators can commit a transaction in less than 60 seconds, though this is a very conservative estimate and can probably be much faster; and it only gets faster with increased bandwidth and computational capacity of each node.  In the near future we&amp;rsquo;ll be able to commit transactions on a global Tendermint blockchain with more than 1000 validators in a matter of seconds &amp;ndash; the only real limitation is the speed of light.&lt;/p&gt;

&lt;h3 id=&#34;case-2-name-registry-lookup:1825e1740a61156b2d6c2c2a5daacec7&#34;&gt;Case 2: Name registry lookup&lt;/h3&gt;

&lt;p&gt;Say that you&amp;rsquo;re in the same room with Satoshi, but instead of verifying a payment, you need to verify Satoshi&amp;rsquo;s public key as registered under the name &amp;ldquo;@satoshi&amp;rdquo; on a name-registry blockchain.  The main difference here is that you&amp;rsquo;re looking to verify the current value of a pre-existing value on the blockchain-derived name-registry state.&lt;/p&gt;

&lt;p&gt;With Bitcoin (and Namecoin), you can verify that &amp;ldquo;@satoshi&amp;rdquo; was registered with a particular public key at some point in the past, but you wouldn&amp;rsquo;t know whether the public key had been updated because Bitcoin (and Namecoin) doesn&amp;rsquo;t support balanced merkle trees on the state derived from the blockchain.  In Namecoin you can check that a transaction was included in the blockchain, but you cannot efficiently check for the exclusion of updates that may follow without downloading the entire blockchain.  Even if Bitcoin/Namecoin did support balanced merkle trees on name-registry state, you would still have to download and verify all the blockchain hashes and headers, and if the value might have been updated recently you&amp;rsquo;re still vulnerable to a fork-censorship attack.&lt;/p&gt;

&lt;p&gt;With Tendermint, all you need is the most recent blockhash signed by more than &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; of the validators, and a merkle proof that proves the current value associated with the name &amp;ldquo;@staoshi&amp;rdquo;.  You don&amp;rsquo;t even need to wait for a single commit.  If you&amp;rsquo;re interested, see &lt;a href=&#34;https://github.com/tendermint/tendermint/wiki/Merkle-Trees#iavl-tree&#34;&gt;https://github.com/tendermint/tendermint/wiki/Merkle-Trees#iavl-tree&lt;/a&gt; for more information on our balanced binary merkle tree implementation.&lt;/p&gt;

&lt;p&gt;In future posts we&amp;rsquo;ll go into detail about the consensus algorithm and how it can provide these unique speed &amp;amp; security guarantees without proof-of-work mining.  For now, you can check the most recent Tendermint spec on the github wiki here: &lt;a href=&#34;https://github.com/tendermint/tendermint/&#34;&gt;https://github.com/tendermint/tendermint/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;tendermint-architecture:1825e1740a61156b2d6c2c2a5daacec7&#34;&gt;Tendermint architecture&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://tendermint.com/images/tm_architecture.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;The above diagram is meant to show that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the consensus and tx-execution modules are separate except for the shared (immutable/merkle-ized) state.&lt;/li&gt;
&lt;li&gt;the consensus module takes a block, a commit for the block, and the last state and uses the tx-execution module to produce the next state.&lt;/li&gt;
&lt;li&gt;the VM call transaction is one of many transaction types offered by the tx-execution module.&lt;/li&gt;
&lt;li&gt;the Ethereum VM (EVM) is only one of potentially many supported virtual machines.&lt;/li&gt;
&lt;li&gt;the next state is completely determined by the old state and the transactions in a block.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, if you have a blockchain application in mind, on Tendermint there are two options to consider &amp;ndash; a smart contract on the Ethereum VM (and in the future, other VMs as well), or, a native transaction type (like SendTx or NameTx above).&lt;/p&gt;

&lt;h2 id=&#34;whether-to-develop-a-vm-smart-contract-or-develop-a-native-tendermint-contract:1825e1740a61156b2d6c2c2a5daacec7&#34;&gt;Whether to develop a VM smart contract or develop a native Tendermint contract&lt;/h2&gt;

&lt;p&gt;The main benefit of a turing-complete VM on a blockchain is that potentially anyone can upload new contract logic onto the blockchain.  This is especially true on big-bad-public-blockchains (BBPB) like Bitcoin or Ethereum which were designed to allow anyone to upload new contract logic.  On the other hand, private blockchains and consortium blockchains that are more tightly managed may not need or even want arbitrary user-defined logic.&lt;/p&gt;

&lt;p&gt;One thing that developers will appreciate in Tendermint is how much easier it is to code contract logic natively at the blockchain level, rather than as a contract script on a virtual machine.  You should use the VM if you need to deploy the contract on a public blockchain such as Ethereum.  You should use the EVM if you don&amp;rsquo;t have systems programming experience, and you find that writing a solidity contract is easier than writing in Golang, or if your contract-logic is simple enough that you wouldn&amp;rsquo;t mind stepping over bytecode execution to debug your contract.  But for other applications where the former exceptions don&amp;rsquo;t apply, you probably want to write native code on Tendermint for a variety of reasons &amp;ndash; Golang&amp;rsquo;s language tooling is better so debugging is easier, it&amp;rsquo;s computationally more efficient by far, and it&amp;rsquo;s two less complex layers (one for the bytecode compiled language, and one for the VM itself) for already seasoned developers to have to deal with.&lt;/p&gt;

&lt;p&gt;The Ethereum team did a great job inventing the EVM and developing a lot of theory behind turing-complete smart-contracts.  It&amp;rsquo;s necessary on a public blockchain like Ethereum.  So, if you want to port your EVM contract over to Tendermint, that&amp;rsquo;s easy.  On the other hand, if you want full control over your merkle-ized data structures (e.g. without the 32-by-32-byte restriction of the EVM&amp;rsquo;s patricia trie) then you can write your contract as a native transaction type on Tendermint.&lt;/p&gt;

&lt;h2 id=&#34;fin:1825e1740a61156b2d6c2c2a5daacec7&#34;&gt;Fin&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Go to &lt;a href=&#34;http://tendermint.com&#34;&gt;http://tendermint.com&lt;/a&gt; and sign up for the newsletter.&lt;/li&gt;
&lt;li&gt;Develop on Tendermint.&lt;/li&gt;
&lt;li&gt;Email us at hello@tendermint.com with your full name to join our Slack channel.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>